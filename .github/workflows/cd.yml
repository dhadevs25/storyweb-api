name: 🚀 CD - Deploy

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["🔍 CI - Test & Build"]
    types:
      - completed
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 📋 Create deployment info
        run: |
          echo "🚀 Deployment Info:" > deployment-info.txt
          echo "📅 Date: $(date)" >> deployment-info.txt
          echo "🌿 Branch: ${{ github.ref_name }}" >> deployment-info.txt
          echo "📝 Commit: ${{ github.sha }}" >> deployment-info.txt
          echo "👤 Author: ${{ github.actor }}" >> deployment-info.txt
          cat deployment-info.txt
          
      # Uncomment and configure when you have actual deployment target
      # - name: 🚀 Deploy to staging server
      #   run: |
      #     echo "Deploying to staging environment..."
      #     # Add your deployment commands here
      #     # Example: rsync, docker push, kubectl apply, etc.
          
      - name: ✅ Deployment summary
        run: |
          echo "🎉 Staging deployment completed!"
          echo "🔗 Staging URL: https://staging.your-domain.com"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🏷️ Create release tag
        run: |
          TAG_NAME="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "Creating tag: $TAG_NAME"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          
      # Uncomment when you have actual production deployment
      # - name: 🚀 Deploy to production
      #   run: |
      #     echo "Deploying to production environment..."
      #     # Add your production deployment commands
          
      - name: 📢 Deployment notification
        run: |
          echo "🎉 Production deployment completed!"
          echo "🏷️ Release tag: ${{ env.TAG_NAME }}"
          echo "🔗 Production URL: https://your-domain.com"

  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📚 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker image (without push)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            storyweb-api:latest
            storyweb-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: ✅ Build summary
        run: |
          echo "🐳 Docker image built successfully!"
          echo "🏷️ Tags: storyweb-api:latest, storyweb-api:${{ github.sha }}"
          echo "💡 To push to registry, add DOCKER_USERNAME and DOCKER_PASSWORD secrets"
